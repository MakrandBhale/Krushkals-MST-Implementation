import java.util.ArrayList;
import java.util.Collections;

class Graph {
    private ArrayList<Vertex> vertices = new ArrayList<>();
    private ArrayList<Edge> edges = new ArrayList<>();
    private ArrayList<Edge> mst = new ArrayList<>();
    Vertex createVertex(String name){
        Vertex v = new Vertex(name);
        vertices.add(v);
        return v;
    }

    void addEdge(Vertex source, Vertex dest, int weight){
        edges.add(source.addEdge(dest, weight));
    }

    void addEdge(Vertex source, Vertex dest, int weight, boolean isBidirectional){
        // if biDirectional is true, then both source and destination vertices will get an edge with same weight,
        // to add different weight, call addEdge(source, dest, weight) function (twice).
        if(isBidirectional)
            addEdge(dest, source, weight);
        addEdge(source, dest, weight);
    }

    void printMST(){
        int totalWeight = 0;
        System.out.println("MST generated by Krushkal's Algorithm");
        for(Edge e : mst){
            System.out.println(e.getSource().getName() + "--" +e.getDest().getName() + " [weight = " + e.getWeight()+"]");
            totalWeight  += e.getWeight();
        }
        System.out.println("Total Weight of graph is " + totalWeight);
    }

    void start(){
        Collections.sort(edges);
        for(Edge e: edges){
            Vertex parent1 = find(e.getSource());
            Vertex parent2 = find(e.getDest());
            if(parent1 != parent2){
                union(parent1, parent2);
                addToMST(e);
            }
        }
    }

    private void addToMST(Edge e) {
        mst.add(e);
    }

    private void union(Vertex parent1, Vertex parent2) {
        parent2.setParent(parent1);
    }

    private Vertex find(Vertex v){
        if(v.getParent() == v)
            return v;
        return find(v.getParent());
    }
}
